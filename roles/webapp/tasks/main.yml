---
- name: Webapp | Installing packages
  apt: pkg={{ item.package }} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - { package: 'maven' }
    - { package: 'git' }
    - { package: 'daemon' }
    - { package: 'nginx' }
    - { package: 'ssl-cert' }
    - { package: 'xmlstarlet' }

- name: Webapp | Create directories
  shell: mkdir -p {{ item.path }} creates={{ item.path }}
  with_items:
    - { path: '/var/local' }
    - { path: '/var/local/capsid' }
    - { path: '/var/log/capsid' }
    - { path: '/var/run/capsid' }

- name: Webapp | Check out CaPSID webapp from Github
  git:
    repo: https://github.com/capsid/capsid-webapp.git
    dest: /var/local/capsid_webapp
    update: yes
    version: develop

# This merits explanation, but basically, it extracts a value from a POM file. 
- name: Webapp | Discover local version
  shell: xmlstarlet sel -N m="http://maven.apache.org/POM/4.0.0" -t -m '//m:project/m:version' -v . /var/local/capsid_webapp/pom.xml
  register: capsid_webapp_version

- name: Webapp | Testing
  shell: echo {{capsid_webapp_version.stdout}}

- name: Webapp | Build CaPSID webapp
  shell: >
    mvn clean package
    chdir=/var/local/capsid_webapp
    creates=/var/local/capsid_webapp/capsid-webapp-httpd/target/capsid-webapp-httpd-{{capsid_webapp_version.stdout}}-dist.zip

# This is a tricky area. We have a dist containing everything, and we want to deploy a 
# working web application. It would actually be better not to have to do this, but that
# tangles stuff together a bit more. The problem is, a few paths in the Debian package
# are carefully set, and we don't use them with ansible completely correctly. Even so,
# this is clunky and awkward. 
- name: Webapp | Deploy to local directory
  unarchive: src=/var/local/capsid_webapp/capsid-webapp-httpd/target/capsid-webapp-httpd-{{capsid_webapp_version.stdout}}-dist.zip copy=no dest=/var/local/capsid
  notify:
    - restart capsid

- name: Webapp | Write CaPSID configuration files
  template: src={{ item.src }} dest={{ item.dest }}
  notify:
    - restart capsid
  with_items:
    - { src: 'capsid.j2', dest: '/etc/default/capsid' }
    - { src: 'init.d.j2', dest: '/etc/init.d/capsid' }

- name: Webapp | Write nginx configuration files
  template: src={{ item.src }} dest={{ item.dest }}
  notify:
    - restart nginx
  with_items:
    - { src: 'nginx-site.j2', dest: '/etc/nginx/sites-available/capsid' }
    - { src: 'nginx-service.j2', dest: '/etc/init/nginx.conf' }

- name: Webapp | Set /etc/init.d/capsid to be executable
  file: path=/etc/init.d/capsid mode=0700

- name: Webapp | Remove default nginx site
  file: state=absent path=/etc/nginx/sites-enabled/default

- name: Webapp | Make nginx site link
  file: state=link src=/etc/nginx/sites-available/capsid dest=/etc/nginx/sites-enabled/capsid
  notify:
    - restart nginx

- name: Webapp | Create user capsid
  user: name=capsid comment="CaPSID webapp" state=present

- name: Webapp | Assign files to the capsid user
  file: path={{ item.path }} recurse=yes owner=capsid group=adm mode=0750
  with_items:
    - { path: '/var/local/capsid' }
    - { path: '/var/log/capsid' }
    - { path: '/var/run/capsid' }
